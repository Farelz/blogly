// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`editor tests renders correctly on new post page 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Body
    create_post={[MockFunction]}
    create_tag={[MockFunction]}
    data={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Connect(TopBar) />,
        <Context.Provider
          value={[Function]}
        >
          <PostEditor />
        </Context.Provider>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "user_data": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <PostEditor />,
          "value": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "post_id": undefined,
            "user_data": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": Object {
          "$$typeof": Symbol(react.provider),
          "_context": Object {
            "$$typeof": Symbol(react.context),
            "Consumer": [Circular],
            "Provider": [Circular],
            "_calculateChangedBits": null,
            "_changedBits": 0,
            "_currentRenderer": null,
            "_currentValue": undefined,
            "_defaultValue": undefined,
          },
        },
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Connect(TopBar) />,
          <Context.Provider
            value={[Function]}
          >
            <PostEditor />
          </Context.Provider>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "user_data": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <PostEditor />,
            "value": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "post_id": undefined,
              "user_data": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.provider),
            "_context": Object {
              "$$typeof": Symbol(react.context),
              "Consumer": [Circular],
              "Provider": [Circular],
              "_calculateChangedBits": null,
              "_changedBits": 0,
              "_currentRenderer": null,
              "_currentValue": undefined,
              "_defaultValue": undefined,
            },
          },
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
