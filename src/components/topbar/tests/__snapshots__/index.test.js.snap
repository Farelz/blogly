// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`topbar tests renders 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TopBar
    isHomePage={false}
    logout={[MockFunction]}
    notifications={Object {}}
    readNotifications={[MockFunction]}
    user_data={
      Object {
        "user": Object {},
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <NavBar
          imageData={
            Object {
              "image": undefined,
              "imageClass": "",
            }
          }
          isLoggedIn={true}
          logout={[Function]}
          notifications_data={Object {}}
          readNotifications={[Function]}
        />,
        <SideNav
          data={
            Object {
              "image": undefined,
              "imageClass": "",
              "isLoggedIn": true,
              "username": undefined,
            }
          }
          logout={[Function]}
        />,
      ],
      "className": "navbar-wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "imageData": Object {
            "image": undefined,
            "imageClass": "",
          },
          "isLoggedIn": true,
          "logout": [Function],
          "notifications_data": Object {},
          "readNotifications": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Object {
            "image": undefined,
            "imageClass": "",
            "isLoggedIn": true,
            "username": undefined,
          },
          "logout": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <NavBar
            imageData={
              Object {
                "image": undefined,
                "imageClass": "",
              }
            }
            isLoggedIn={true}
            logout={[Function]}
            notifications_data={Object {}}
            readNotifications={[Function]}
          />,
          <SideNav
            data={
              Object {
                "image": undefined,
                "imageClass": "",
                "isLoggedIn": true,
                "username": undefined,
              }
            }
            logout={[Function]}
          />,
        ],
        "className": "navbar-wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "imageData": Object {
              "image": undefined,
              "imageClass": "",
            },
            "isLoggedIn": true,
            "logout": [Function],
            "notifications_data": Object {},
            "readNotifications": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "data": Object {
              "image": undefined,
              "imageClass": "",
              "isLoggedIn": true,
              "username": undefined,
            },
            "logout": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`topbar tests renders navbar 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NavBar
    imageData={Object {}}
    isLoggedIn={false}
    logout={[MockFunction]}
    notifications_data={Object {}}
    readNotifications={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="nav-wrapper"
      >
        <a
          className="sidenav-trigger hide-on-med-and-up"
          data-target="mobile-topbar"
        >
          <MdMenu />
        </a>
        <Link
          href="/"
        >
          <a
            className="brand-logo center"
          >
            <span
              className="blog-title"
            >
              ReactPress
            </span>
          </a>
        </Link>
        <UserMenu
          imageData={Object {}}
          isLoggedIn={false}
          logout={[MockFunction]}
        />
        <NotificationMenu
          isLoggedIn={false}
          notifications_data={Object {}}
          readNotifications={[MockFunction]}
        />
      </div>,
      "className": "topbar nav-extended",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <a
            className="sidenav-trigger hide-on-med-and-up"
            data-target="mobile-topbar"
          >
            <MdMenu />
          </a>,
          <Link
            href="/"
          >
            <a
              className="brand-logo center"
            >
              <span
                className="blog-title"
              >
                ReactPress
              </span>
            </a>
          </Link>,
          <UserMenu
            imageData={Object {}}
            isLoggedIn={false}
            logout={[MockFunction]}
          />,
          <NotificationMenu
            isLoggedIn={false}
            notifications_data={Object {}}
            readNotifications={[MockFunction]}
          />,
        ],
        "className": "nav-wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <MdMenu />,
            "className": "sidenav-trigger hide-on-med-and-up",
            "data-target": "mobile-topbar",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "a",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <a
              className="brand-logo center"
            >
              <span
                className="blog-title"
              >
                ReactPress
              </span>
            </a>,
            "href": "/",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <span
                className="blog-title"
              >
                ReactPress
              </span>,
              "className": "brand-logo center",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "ReactPress",
                "className": "blog-title",
              },
              "ref": null,
              "rendered": "ReactPress",
              "type": "span",
            },
            "type": "a",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "imageData": Object {},
            "isLoggedIn": false,
            "logout": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "isLoggedIn": false,
            "notifications_data": Object {},
            "readNotifications": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "nav",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="nav-wrapper"
        >
          <a
            className="sidenav-trigger hide-on-med-and-up"
            data-target="mobile-topbar"
          >
            <MdMenu />
          </a>
          <Link
            href="/"
          >
            <a
              className="brand-logo center"
            >
              <span
                className="blog-title"
              >
                ReactPress
              </span>
            </a>
          </Link>
          <UserMenu
            imageData={Object {}}
            isLoggedIn={false}
            logout={[MockFunction]}
          />
          <NotificationMenu
            isLoggedIn={false}
            notifications_data={Object {}}
            readNotifications={[MockFunction]}
          />
        </div>,
        "className": "topbar nav-extended",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <a
              className="sidenav-trigger hide-on-med-and-up"
              data-target="mobile-topbar"
            >
              <MdMenu />
            </a>,
            <Link
              href="/"
            >
              <a
                className="brand-logo center"
              >
                <span
                  className="blog-title"
                >
                  ReactPress
                </span>
              </a>
            </Link>,
            <UserMenu
              imageData={Object {}}
              isLoggedIn={false}
              logout={[MockFunction]}
            />,
            <NotificationMenu
              isLoggedIn={false}
              notifications_data={Object {}}
              readNotifications={[MockFunction]}
            />,
          ],
          "className": "nav-wrapper",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <MdMenu />,
              "className": "sidenav-trigger hide-on-med-and-up",
              "data-target": "mobile-topbar",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "a",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <a
                className="brand-logo center"
              >
                <span
                  className="blog-title"
                >
                  ReactPress
                </span>
              </a>,
              "href": "/",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <span
                  className="blog-title"
                >
                  ReactPress
                </span>,
                "className": "brand-logo center",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "ReactPress",
                  "className": "blog-title",
                },
                "ref": null,
                "rendered": "ReactPress",
                "type": "span",
              },
              "type": "a",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "imageData": Object {},
              "isLoggedIn": false,
              "logout": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "isLoggedIn": false,
              "notifications_data": Object {},
              "readNotifications": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "nav",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`topbar tests renders notifications 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notifications
    notifications={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ul
        className="dropdown-content"
        id="notifications-menu"
      >
        <li
          className="notification"
        >
          <a
            className="center"
          >
            No new notifications
          </a>
        </li>
      </ul>,
      "className": "dropdown-container",
      "id": "notifications",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <li
          className="notification"
        >
          <a
            className="center"
          >
            No new notifications
          </a>
        </li>,
        "className": "dropdown-content",
        "id": "notifications-menu",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <a
            className="center"
          >
            No new notifications
          </a>,
          "className": "notification",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "No new notifications",
            "className": "center",
          },
          "ref": null,
          "rendered": "No new notifications",
          "type": "a",
        },
        "type": "li",
      },
      "type": "ul",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ul
          className="dropdown-content"
          id="notifications-menu"
        >
          <li
            className="notification"
          >
            <a
              className="center"
            >
              No new notifications
            </a>
          </li>
        </ul>,
        "className": "dropdown-container",
        "id": "notifications",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <li
            className="notification"
          >
            <a
              className="center"
            >
              No new notifications
            </a>
          </li>,
          "className": "dropdown-content",
          "id": "notifications-menu",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <a
              className="center"
            >
              No new notifications
            </a>,
            "className": "notification",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "No new notifications",
              "className": "center",
            },
            "ref": null,
            "rendered": "No new notifications",
            "type": "a",
          },
          "type": "li",
        },
        "type": "ul",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`topbar tests renders notifications menu 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NotificationMenu
    isLoggedIn={false}
    notifications_data={Object {}}
    readNotifications={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): false,
  Symbol(enzyme.__nodes__): Array [
    false,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
